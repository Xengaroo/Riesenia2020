public class Nego2 {
    public static String sucet(String a, String b){
        int pomp = 0;
        int pomm = 0;
        int c = 0;
        if(a.length() > b.length()){
            c = b.length();
        }else{
            c = a.length();
        }
        int aa = a.length()-1;
        int bb = b.length() -1;
        int pomc = 0;
        String p;
        StringBuffer res1 = new StringBuffer();

        for(int i =c-1;i>=0;i--){
            if(a.charAt(aa) == '1' && b.charAt(bb) == '1'){

                pomc = 0 - pomm + pomp;
                if(pomc < 0){
                    pomc *= -1;
                }
                res1.append(Integer.toString(pomc));
                if(pomm == 1 && pomp == 0){
                    pomp = 1;
                }else{
                    pomp = 0;
                }
                pomm = 1;
            }
            if((a.charAt(aa) == '1' && b.charAt(bb) == '0') || (a.charAt(aa) == '0' && b.charAt(bb) == '1')){

                pomc = 1 - pomm + pomp;
                if(pomc > 1){
                    pomc = 0;
                }
                res1.append(Integer.toString(pomc));
                if(pomm == 0 && pomp == 1){
                    pomm = 1;
                }else{
                    pomm = 0;
                }
                pomp = 0;
            }
            if(a.charAt(aa) == '0' && b.charAt(bb) == '0'){
               // System.out.println(pomm);

                pomc = 0 - pomm + pomp;
                if(pomc < 0){
                    pomc = 1;
                }
                res1.append(Integer.toString(pomc));
                if(pomm == 1 && pomp == 0){
                    pomp = 1;
                }else{
                    pomp = 0;
                }
                if(pomm == 0 && pomp == 1){
                    pomm = 1;
                }else{
                    pomm = 0;
                }

            }
            aa--;
            bb--;
        }

        if(aa >= 0){
            int q = aa;
            for(int i = 0; i<= q;i++){
                if(a.charAt(aa) == '1'){
                    pomc = 1 - pomm + pomp;
                    if(pomc > 1){
                        pomc = 0;
                    }
                    res1.append(Integer.toString(pomc));
                    if(pomm == 0 && pomp ==1){
                        pomm = 1;
                    }else{
                        pomm = 0;
                    }
                    pomp = 0;
                }
                if(a.charAt(aa) == '0'){
                    pomc = 0 - pomm + pomp;
                    if(pomc < 0){
                        pomc = 1;
                    }
                    res1.append(Integer.toString(pomc));
                    if(pomm == 1 && pomp ==0){
                        pomp = 1;
                    }else{
                        pomp = 0;
                    }
                    pomm = 0;
                }
                aa--;
            }
        }

        if(bb >= 0){
            int q = bb;
            for(int i = 0; i<= q;i++){

                if(b.charAt(bb) == '1'){
                    pomc = 1 - pomm + pomp;
                    if(pomc > 1){
                        pomc = 0;
                    }
                    res1.append(Integer.toString(pomc));
                    if(pomm == 0 && pomp ==1){
                        pomm = 1;
                    }else{
                        pomm = 0;
                    }
                    pomp = 0;
                }
                if(b.charAt(bb) == '0'){
                    pomc = 0 - pomm + pomp;
                    if(pomc < 0){
                        pomc = 1;
                    }
                    res1.append(Integer.toString(pomc));
                    if(pomm == 1 && pomp ==0){
                        pomp = 1;
                    }else{
                        pomp = 0;
                    }
                    pomm = 0;
                }
                bb--;
            }
        }

        if(pomm == 1 && pomp == 0){

            res1.append("11");

            pomm = 0;
        }
        if(pomm == 0 && pomp ==1){

            res1.append("1");

            pomp = 0;
        }
        if(pomm == 1 && pomp ==1){
            res1.append("0");
            pomm = 0;
            pomp = 0;
        }
        int i = res1.length() - res1.lastIndexOf("1");
    res1.reverse();
    String res = res1.substring(i-1);
    return res;
    }
    public static String opacne(String a){
        return sucet(a,a+"0");
    }
    public static void main(String[] args) {
        System.out.println(sucet("0101","01"));
        System.out.println(sucet
    }
}
